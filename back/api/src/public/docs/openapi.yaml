openapi: 3.0.0
info:
  title: 'Пример реализации социальной сети'
  description: "## Соцальная сеть Шаг и компания \n\n Наша проба сделать хорошую социальную сеть"
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
    description: 'Local API server'
paths:
  /api/auth/login:
    post:
      tags:
        - auth
      summary: 'Login a user'
      operationId: api.auth.login
      requestBody:
        required: true
      responses:
        '200':
          description: Ok
  /api/auth/register:
    post:
      tags:
        - auth
      summary: 'Register a user'
      operationId: api.auth.register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessLoginResource'
        '422':
          description: 'password confirmation'
          content:
            application/json:
              schema:
                properties:
                  status: { type: string, example: error }
                  message: { type: string, example: 'password confirmation.' }
                type: object
components:
  schemas:
    ValidationError:
      properties:
        message:
          type: string
          example: 'The given data was invalid.'
        errors:
          properties:
            'key 1':
              type: array
              items:
                type: string
                example: 'Error message 1'
            'key 2':
              type: array
              items:
                type: string
                example: 'Error message 2'
          type: object
      type: object
    RegisterRequest:
      required:
        - name
        - email
        - password
        - password_confirmation
      properties:
        name:
          type: string
          example: 'John Doe'
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: '123456'
        password_confirmation:
          type: string
          example: '123456'
      type: object
    SuccessLoginResource:
      properties:
        status:
          type: string
          example: 'true'
      type: object
    User:
      properties:
        id:
          type: integer
          example: '2'
        name:
          type: string
          example: 'John Doe'
        email:
          type: string
          format: email
          example: john@example.com
      type: object
  securitySchemes:
    BearerToken:
      type: http
      bearerFormat: JWT
      scheme: bearer
tags:
  -
    name: auth
    description: 'User authentication'
  -
    name: post
    description: 'Операции с постами'
